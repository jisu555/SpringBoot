JPA 사용을 위한 환경 구성
1. H2 DataBase : 테스트 환경에서 많이 사용 ==> Oracle (서비스 환경)
    - 라이브러리 추가 : build.gradle
         runtimeOnly 'com.h2database:h2'
    - db 연결 설정 : application.properties 
		spring.h2.console.enabled=true
		spring.h2.console.path=/h2-console
		spring.datasource.url=jdbc:h2:~/local
		spring.datasource.driverClassName=org.h2.Driver
		spring.datasource.username=sa
		spring.datasource.password=
	- H2 DataBase 파일을 생성 : ~ : 로그온한 계정의 홈폴더( c:\users\hi )
		~/local.mv.db		<== H2 데이터 베이스의 DataBase 파일 
			cd ~
			touch local.mv.db
			
	- H2 DataBase 접속 : 프로젝트 시작.   크롬 URL : http://localhost:9696/h2-console/
	
2. JPA 환경 설정

   - 의존성 라이브러리 추가 : build.gradle
      implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
   - JPA 설정 : application.properties
   		# JPA ( JPA는 H2 DB와 연결 설정, 변경사항만 업데이트됨 )
   		spring.jpa.properties.hibernate.dialect=org.hibernate.dialect/H2Dialect
   		spring.jpa.hibernate.ddl-auto=update	# 주의 요함 : 운영환경에서는 none, validate
   		    # none : 엔티티(자바의 DTO객체)가 변경되더라도 데이터베이스를 변경하지 않도록 설정
   		    # update : 엔티티 변경된 부분만 데이터베이스에 적용됨
   		    # validate : 변경사항이 있는지 확인만 함
   		    # create : 스프링 부트가 작동될 때 DB의 테이블을 Drop 하고 다시 생성함.
   		    # create-drop : create와 동일함. 스프링 부트가 종료될 때 테이블 삭제함. (drop)
   		    
3. 엔티티 클래스 작성 : @Entity 어노테이션이 붙은 자바 클래스
	엔티티 : 데이터베이스 테이블과 매핑되는 자바 클래스 <== DTO의 클래스 이름이 테이블명과 매핑,
		dto의 필드명은 테이블의 컬럼명과 매핑된
		
		-- Question.java  : 부모
		-- Answer.java    : 자식
		
JPA는 DB의 테이블 컬럼이 수정, 생성, 삭제가 빈번하게 발생 시 유지보수를 아주 쉽게 할 수 있다.
   - JPA 사용하지 않는 경우 DB의 테이블이 수정이 발생 시 dto, dao (insert, update, delete, get, getList)
   - 단점 : 테이블이 복잡한 조인으로 연결된 경우나, 복잡한 계산을 처리하는 환경에서는 적합하지 않다.
   				( MyBatis : 유지 보수도 쉽게하고, 복잡한 계산처리도 가능 )
   				
4. 레포지토리(Repository)클래스 : DAO : 자바 클래스의 JPA 메소드를 사용해서
		SQL의 CRUD ( Insert, Select, Update, delete)
	- JPA를 사용해서 DB를 CRUD 하려면 Repository 인터페이스를 생성해야 한다.
	- JpaRepository 를 상속해서 만들어야 한다.
		
		
=============================================================		
실습 : sbb2 프로젝트 진행하세요  <== h2db JPA 라이브러리 다운받는 셋팅 필요
	JPA Entity 클래스 실습, JPA 메소드를 사용해서 CRUD, save(), findAll()
	
아래 내용의 JPA Entity 클래스를 생성하세요
테이블명 : users		<== user는 예약어
	idx	  primary key, 자동증가(1,1)
	name varchar(100)
	pass varchar(100)
	email varchar(200)
	regdate LocalDateTime
	cnt   int
	
-- 임의의 값을 5개 insert
-- 넣은 값을 regdate 컬럼을 기준으로 내림차순(Desc) 정렬
-- idx 3번의 name과 email 주소를 수정
-- idx 4번의 값을 삭제		

==============================================================
Transaction (트랜잭션) : 일(작업)을 처리하는 최소단위
  - 트랜잭션이 시작되면 트랜잭션 완료까지 Lock이 걸림.
  - 트랜잭션이 발생되면 SQL Log에 모두 기록이 됨.
  - DML 문에서 트랜잭션이 발생, (Insert, Update, Delete)
  - 트랜잭션이 발생되고 commit 되기 전까지는 RAM에만 적용
  - rollback (트랜잭션 발생시점으로 되돌림),
  - commit (DB 영구적으로 적용) ;
  - Oracle  _ Insert, Update, Delete 구문이 발생되면 자동으로 트랜잭션 시작
             commit; 을 명시해야함 
  - MSSQL, MySQL  : 자동 커밋 트랜잭션 (Statement, preparedStatement)
  - 백업 시점이 아니라 오류가 발생된 시점으로  되돌릴 수 있다.
  - All or Nothing : 되면 전부 완료되게 하거나 아니면 원점으로 되돌려 줘야한다.
		
=================================================================
Service 클래스 : 비즈니스 로직을 처리함.
	- 규모가 큰 사이트에서 비즈니스로직을 간략하게 처리 할 수 있다.
	- 유지보수가 빈번한 경우 유지보수를 쉽게 구현할 수 있다.	
	- 보안을 강화할 수 있다.
	
Client ===> Controller ===> Service (비즈니스 로직처리, dto, DAO ) ===> DAO => DB

=================================================================

// Spring Framework를 사용한 폼 태그 내의 유효성 검사

1. Spring Framework를 사용한 폼 태그 내의 유효성 검사

1. 라이브러리 등록 :
	build.gradle에 등록
           //Spring에서 제공해주는 유효성 검사 라이브러리 : form에서 빈 값이나 글자수 제한
           implementation 'org.springframework.boot:spring-boot-starter-validation'

2.  유효성 검사 클래스를 생성 (QuestionFrom.java) , @NotEmpty (message=”오류메시지”)
	@Getter
	@Setter

	유효성 검사 필드 : subject, content
	
	=========================================================
	STS에서 포트가 충돌나서 실행이 안 되는 경우
	1. 관리자 권한의 명령프롬프트로 실행
	2. netstat -nao 	: 열려있는 포트의 PID 확인 (PID :프로세스(메모리의 로드된 프로그램)의 고유번호
	3. taskkill / f /pid 14420(2번에서 확인한 pid)

	=================================
	페이징 처리 : 스프링에서는 JPA에서 제공해주는 객체를 사용
		- 스프링에서는 페이징을 처리하기 위한 별도의 라이브러리가 필요 없다.
		- 기본적으로 JPA 페이징 처리를 위한 객체가 존재한다.
		- Page
		- PageRequest
		- Pagealbe
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
		
		